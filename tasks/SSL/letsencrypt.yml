---

- name: Create letsencrypt config file /etc/letsencrypt.ini
  template:
    src: letsencrypt/cli.ini.j2
    dest: /etc/letsencrypt.ini

- name: Check to see if SSL cert is already there
  stat:
    path: /etc/letsencrypt/live/{{ ansible_fqdn }}/fullchain.pem
  register: cert_present

- name: Stop nginx for letsencrypt
  service:
    name: nginx
    state: stopped
  when: not cert_present.stat.exists

- name: Get SSL certificate from letsencrypt
  command: certbot certonly -c /etc/letsencrypt.ini -n --agree-tos
  args:
    creates: /etc/letsencrypt/live/{{ ansible_fqdn }}/fullchain.pem
  notify: restart nginx
  when: not staging

- name: Get SSL certificate from letsencrypt (Staging)
  command: certbot certonly -c /etc/letsencrypt.ini -n --agree-tos --staging
  args:
    creates: /etc/letsencrypt/live/{{ ansible_fqdn }}/fullchain.pem
  notify: restart nginx
  when: staging

- name: Create cron job to automatically update SSL cert (non-systemd)
  cron:
    name: "Renew letsencrypt SSL certs"
    minute: "47"
    hour: "23"
    month: "*"
    day: "15"
    job: "service nginx stop && /opt/letsencrypt/letsencrypt-auto renew --quiet --no-self-upgrade && service nginx start"
  when: >
    (ansible_os_family == "RedHat" and ansible_distribution_major_version == "6") or
    (ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "14")

- name: Create cron job to automatically update SSL cert (systemd)
  cron:
    name: "Renew letsencrypt SSL certs"
    minute: "47"
    hour: "23"
    month: "*"
    day: "15"
    job: "systemctl stop nginx && /opt/letsencrypt/letsencrypt-auto renew --quiet --no-self-upgrade && systemctl start nginx"
  when: >
    (ansible_os_family == "RedHat" and ansible_distribution_major_version == "7") or
    (ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "16")
# vim:ft=ansible:
